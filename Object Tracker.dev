#include "opencv2/video/tracking.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"

#include <iostream>
#include <ctype.h>

using namespace cv;
using namespace std;

Mat image;

bool SelectObject = false;
int trackObject = 0;
Point origin;
Rect selection;
int vmin = 10, vmax = 256, smin = 30;

static void onMouse(int event, int x, int y, int void*){
	if(SelectObject){
		selection.x = MIN(x, origin.x);
		selection.y = MIN(y, origin.y);
		selection.width = std::abs(x - origin.x);
		selection.height = std::abs(y -origin.y);
		
		selection &= Rect(0,0,image.cols, image.rows);
		
	}
	switch(event){
		case CV_EVENT_LBUTTIONDOWN;
		origin = Point(x,y)
		selection = Rect(x,y,0,0)
		selectObject = true;
		break;
		case  CV_EVENT_LBUTTIONUP;
		selectObject = false;
		if(selection.width > 0 && selection.height > 0)
		trackobject = -1;
		break;
	}
	
}
static void help(){
	cout<< "CAMSHIFT based object tracking\n"
	cout <<"n\keyboard input options:\n"
	"\tesc-quit the program"
	"\ts-stop the tracking"
	"\tp - pause video\n"
}

int main(int argc, const char ** argv)
{
	help();
	
	videoCapture cap;
	Rect trackWindow;
	int hsize = 16;
	float hranges[] = {0,180};
	const float*phranges = hranges;
	
	int camnum = 0;
	if(argc==2)
	camNum = atoi(argv[1])
	
	cap.open(camNum)
	if(!cap.isOpened() ){
		help();
		cout <<"could not initialize capturing"
		"current paraments value" <<camNum<< endl;
		return -1;
	}
	namedWindow("CamShift ObjectTracker",0);
	setMouseCallBack("CamShift ObjectTracker",onMouse, 0);
	
	mat frame, hsv, hue, mask, hist, histimage = Mat::zeros(200,300, CV_BUC3),backproj;
	
	for(;;)
	{
		if(!paused){
			cap >> frame;
			if(frame.empty())
			break;
		}
		frame.copyTo(image);
		if(!paused){
			cvtColor(image, hsv, CV_BGR2HSV);
			
		if(trackobject){
			int _vmin = vmin, _vmax = vmax;
			inRange(hsv, Scalar(0, smin, MIN(Vmin, _vmax));
			Scalar(180, 256, MAX(_vmin, _vmax)), mask);
			int ch[] {0,0};
			hue.create(hsv.size(), hsv.depth());
			mixChanels(&hsv, 1, &hue, 1, ch, 1);
			
			if(trackobject<0){
				Mat roi(hui, selection), maskroi(mask, selection);
				caLcHist(&roi, 1, 0, maskroi, hist, 1, &hsize, &phranges);
				normalize(hist, hist, 0, 255, CV_MINMAX);
				
				trackwindow =  selection;
				trackObject = 1;
				
				histing = Scalar::all(0);
				int binW = histimg.cols/hsize;
				Mat buf(1, hsize, CV_BUC3);
				for(int i = 0; i<hsize; i++){
					int val = saturate_cast<int>(hist.at<float>(i)*histimg.rows/255;
					rectangle(histimg, Point(i*binW, histImg.rows-val),
					Scalar(buf.at<Vec3b>(i)),-1, 8);
				}
			}
			calbackProject(&hue, 1, 0 , hist,backproj, &phranges);
			backProject &= mask;
			RotateRect trackbox = Rect(trackwindow.x - r, trackwindow.y - r, 
			trackwindow.x + r , trackwindow.y + r ) &
			Rect(0,0,cols,rows);
		}
			ellipse(image, trackbox, Scalar(0,0,255)),3,CV_AA);
		}
		
	}
		else if (trackObject < 0)
		paused = false;
		
		if(selectobject && selection.width > 0 && selection.height > 0)
		{
			Mat roi(image, selection);
			bitwise_not(roi, roi);
		}
		imshow("Cam Shift Object Tracker", image)
		char c = (char) waitKey(10);
		if(c == 27)
		break;
		switch(c)
		{
			case "s";
			trackObject = 0;
			histimg = Scalar::all(0);
			break;
			
			default:
			}
	}
	return 0;
	
		
